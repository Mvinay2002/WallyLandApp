Group 3 - IST 412
Maddie Mondoil
Vinay Mallipudi
Benjamin Barone
Zachary Greene

M05_A02_FINAL_Group3.TXT

First Use Case: Ticketing Booth
For this assignment, we focused on the TicketingBooth class. In order to create a functional Ticketing Booth UI, we also created a TicketingBoothView class (for the UI), a MainView class (for the default UI), and an App class (this houses the general information needed to get the UI to function properly). We also started to build out the WallyLandApp class, which will work as our controller class. When running our project, you will start by seeing the default UI. Here, there are four buttons to choose from. For sake of this use case, the user will click the "Go to Ticketing Booth" button. Once the button is clicked, the user will be brought to the Ticketing Booth UI. Here, there are multiple buttons and user input options to choose from. In the dropdown menu, the user is given the option to choose an event to learn more about. Once an event is chosen and they have input how many tickets they are looking for (top right), they can press the "See available tickets and prices" button to do exactly that. The text box in the center of the screen will provide them with the information they are looking for. From here, the user can choose to learn about other events, or they can go ahead and purchase their tickets for the event. If the number of tickets they are requesting is less than the available tickets, then their purchase will go through successfully. If not, they will be told that the event no longer has enough tickets for their request. If a user places an order but changes their mind, they can press on the "Cancel Order" button to reverse the most recent purchase. Throughout this process, there are a handful of validation checks that are made to ensure that the user is putting in proper inputs and requests.


Second Use Case: Emergency Services
For our second use case, we added an Emergency Services feature. This lets users report a missing child by entering the childâ€™s name and retrieving the emergency contact number for assistance. Emergency Services fits naturally into the app and is accessible through the "Go to Emergency Services" button on the main menu. From there, users can log a report, view the emergency contact information, and use a "Return to Main Menu" button to easily go back. To make this work, we created a new EmergencyServicesView to handle the interface and expanded the wallyLandApp controller to connect everything. This added functionality works seamlessly with the first use case, offering an intuitive way for users to move between ticketing and emergency features. The structure of our project builds on what we developed in the first use case. The view package now includes the new EmergencyServicesView along with the existing MainView and TicketingBoothView. In the controller package, the wallyLandApp class now manages the Emergency Services flow and links it back to the main menu.

In addition to the new use case, we also made adjustments to our first use case, Ticketing Booth, to fix bugs identified in our first submission. First, we made both the main screen and the TicketBooth screen non-resizable so that all elements on the screen can be seen at all times. We adjusted the $ formatting so that all prices can be seen to the second decimal point. We fixed the cancel order button by ensuring that an order has been placed before canceling it. We did this by tracking orders with a hash map, and making sure that a payment has been completed before attempting to cancel anything. Lastly, we added a "Back" button so that the user can return to the main screen.


Third Use Case: Restaurant Management
For our third use case, we introduced a Restaurant Management feature that allows users to reserve tables, check table availability, and view the restaurant menu. The park features one massive restaurant area, which can accommodate a total of 200 tables. Each table seats up to 4 people. Visitors can use this feature to plan their visit to the restaurant, ensuring they have reserved seating when they arrive. The restaurant offers a fixed menu, allowing guests to decide what they want to eat in advance of visiting the restaurant. The menu includes classic options like hot dogs, burgers, pretzels, and beverages such as coffee, soda, iced tea, lemonade, and more. This feature is accessible from the main menu by clicking the "Go to Restaurant" button. Upon entering the Restaurant UI, users can input the number of tables they wish to reserve. If enough tables are available, the reservation is confirmed. Users can also check how many tables are still available at any time. Additionally, the "View Menu" button displays the restaurant menu. To implement this feature, we created a new Restaurant model to handle table reservations and menu data. A RestaurantView class was added for the user interface, and the wallyLandApp controller was updated to connect the restaurant functionality to the rest of the application. The restaurant functionality integrates smoothly with the existing ticketing and emergency services features, ensuring a cohesive user experience.


Fourth Use Case: Zach
Description Pending

